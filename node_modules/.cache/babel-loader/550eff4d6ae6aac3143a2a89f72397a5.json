{"ast":null,"code":"var _jsxFileName = \"/Users/genet/Desktop/Final-Portfolio/src/components/Contact/index.js\";\nimport React from 'react';\nimport Swal from 'sweetalert2';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Form } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Contact extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.nameChange = event => {\n      this.setState({\n        name: event.target.value\n      });\n    };\n\n    this.emailChange = event => {\n      this.setState({\n        email: event.target.value\n      });\n    };\n\n    this.messageChange = event => {\n      this.setState({\n        feedback: event.target.value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault(); //This templateId is created in EmailJS.com\n\n      const templateId = 'template_r4c6dwx'; //This is a custom method from EmailJS that takes the information \n      //from the form and sends the email with the information gathered \n      //and formats the email based on the templateID provided.\n\n      this.sendFeedback(templateId, {\n        message: this.state.feedback,\n        name: this.state.name,\n        email: this.state.email\n      });\n    };\n\n    this.sendFeedback = (templateId, variables) => {\n      window.emailjs.send('gmail', templateId, variables).then(res => {\n        // Email successfully sent alert\n        Swal.fire({\n          title: 'Email Successfully Sent',\n          icon: 'success'\n        });\n      }) // Email Failed to send Error alert\n      .catch(err => {\n        Swal.fire({\n          title: 'Email Failed to Send',\n          icon: 'error'\n        });\n        console.error('Email Error:', err);\n      });\n    };\n\n    this.state = {\n      feedback: '',\n      name: '',\n      email: ''\n    };\n  } // saves the user's name entered to state\n\n\n  render() {\n    return (\n      /*#__PURE__*/\n      //Form layout that requires a Name, Email, and message\n      _jsxDEV(\"form\", {\n        className: \"test-mailing\",\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: \"1.2rem\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n            children: \"You can also send me an email directly from here\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"name\",\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"form-control email-inputs\",\n              name: \"user_name\",\n              type: \"text\",\n              id: \"name\",\n              onChange: this.nameChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"email\",\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"form-control email-inputs\",\n              name: \"user_email\",\n              type: \"text\",\n              id: \"email\",\n              onChange: this.emailChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"message\",\n            children: \"Message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n              id: \"message\",\n              name: \"message\",\n              onChange: this.messageChange,\n              placeholder: \"Put your message here\",\n              required: true,\n              className: \"email-text-area form-control\",\n              rows: \"15\",\n              cols: \"20\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Submit\",\n          className: \"btn btn-outline-light\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)\n    );\n  }\n\n}\n\nexport default Contact;","map":{"version":3,"sources":["/Users/genet/Desktop/Final-Portfolio/src/components/Contact/index.js"],"names":["React","Swal","Form","Contact","Component","constructor","props","nameChange","event","setState","name","target","value","emailChange","email","messageChange","feedback","handleSubmit","preventDefault","templateId","sendFeedback","message","state","variables","window","emailjs","send","then","res","fire","title","icon","catch","err","console","error","render","fontSize"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAO,sCAAP;AACA,SAASC,IAAT,QAAqB,iBAArB;;;AAEA,MAAMC,OAAN,SAAsBH,KAAK,CAACI,SAA5B,CAAqC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAQjBC,UARiB,GAQHC,KAAD,IAAW;AACtB,WAAKC,QAAL,CAAc;AAACC,QAAAA,IAAI,EAAEF,KAAK,CAACG,MAAN,CAAaC;AAApB,OAAd;AACD,KAVgB;;AAAA,SAajBC,WAbiB,GAaFL,KAAD,IAAW;AACvB,WAAKC,QAAL,CAAc;AAACK,QAAAA,KAAK,EAAEN,KAAK,CAACG,MAAN,CAAaC;AAArB,OAAd;AACD,KAfgB;;AAAA,SAkBjBG,aAlBiB,GAkBAP,KAAD,IAAW;AACzB,WAAKC,QAAL,CAAc;AAACO,QAAAA,QAAQ,EAAER,KAAK,CAACG,MAAN,CAAaC;AAAxB,OAAd;AACD,KApBgB;;AAAA,SAuBjBK,YAvBiB,GAuBDT,KAAD,IAAW;AACxBA,MAAAA,KAAK,CAACU,cAAN,GADwB,CAGxB;;AACA,YAAMC,UAAU,GAAG,kBAAnB,CAJwB,CAMxB;AACA;AACA;;AACA,WAAKC,YAAL,CAAkBD,UAAlB,EAA8B;AACEE,QAAAA,OAAO,EAAE,KAAKC,KAAL,CAAWN,QADtB;AAEEN,QAAAA,IAAI,EAAE,KAAKY,KAAL,CAAWZ,IAFnB;AAGEI,QAAAA,KAAK,EAAE,KAAKQ,KAAL,CAAWR;AAHpB,OAA9B;AAOD,KAvCgB;;AAAA,SA0CjBM,YA1CiB,GA0CF,CAACD,UAAD,EAAaI,SAAb,KAA2B;AACxCC,MAAAA,MAAM,CAACC,OAAP,CAAeC,IAAf,CACE,OADF,EACWP,UADX,EAEEI,SAFF,EAGII,IAHJ,CAGSC,GAAG,IAAI;AACZ;AACA3B,QAAAA,IAAI,CAAC4B,IAAL,CAAU;AACRC,UAAAA,KAAK,EAAE,yBADC;AAERC,UAAAA,IAAI,EAAE;AAFE,SAAV;AAID,OATH,EAUE;AAVF,OAWGC,KAXH,CAWSC,GAAG,IAAI;AACZhC,QAAAA,IAAI,CAAC4B,IAAL,CAAU;AACRC,UAAAA,KAAK,EAAE,sBADC;AAERC,UAAAA,IAAI,EAAE;AAFE,SAAV;AAIAG,QAAAA,OAAO,CAACC,KAAR,CAAc,cAAd,EAA8BF,GAA9B;AACD,OAjBH;AAkBD,KA7DgB;;AAEf,SAAKX,KAAL,GAAa;AAAEN,MAAAA,QAAQ,EAAE,EAAZ;AACCN,MAAAA,IAAI,EAAE,EADP;AAECI,MAAAA,KAAK,EAAE;AAFR,KAAb;AAID,GAP8B,CAQ/B;;;AAwDAsB,EAAAA,MAAM,GAAG;AACP;AAAA;AAEE;AACA;AAAM,QAAA,SAAS,EAAC,cAAhB;AAA+B,QAAA,QAAQ,EAAE,KAAKnB,YAA9C;AAAA,gCAEE;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAK,UAAA,KAAK,EAAE;AAACoB,YAAAA,QAAQ,EAAE;AAAX,WAAZ;AAAA,kCAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA,oCACI;AAAO,cAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAO,cAAA,SAAS,EAAC,2BAAjB;AAA6C,cAAA,IAAI,EAAC,WAAlD;AAA8D,cAAA,IAAI,EAAC,MAAnE;AACE,cAAA,EAAE,EAAC,MADL;AACY,cAAA,QAAQ,EAAE,KAAK9B,UAD3B;AACuC,cAAA,QAAQ;AAD/C;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,eASE;AAAA,oCACI;AAAO,cAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAO,cAAA,SAAS,EAAC,2BAAjB;AAA6C,cAAA,IAAI,EAAC,YAAlD;AAA+D,cAAA,IAAI,EAAC,MAApE;AACE,cAAA,EAAE,EAAC,OADL;AACa,cAAA,QAAQ,EAAE,KAAKM,WAD5B;AACyC,cAAA,QAAQ;AADjD;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBATF,eAeE;AAAO,YAAA,OAAO,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAfF,eAkBE;AAAA,mCACE;AACE,cAAA,EAAE,EAAC,SADL;AAEE,cAAA,IAAI,EAAC,SAFP;AAGE,cAAA,QAAQ,EAAE,KAAKE,aAHjB;AAIE,cAAA,WAAW,EAAC,uBAJd;AAKE,cAAA,QAAQ,MALV;AAME,cAAA,SAAS,EAAC,8BANZ;AAOE,cAAA,IAAI,EAAC,IAPP;AAQE,cAAA,IAAI,EAAC;AARP;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAlBF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,eAoCE;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,KAAK,EAAC,QAA3B;AAAoC,UAAA,SAAS,EAAC;AAA9C;AAAA;AAAA;AAAA;AAAA,gBApCF;AAAA;AAAA;AAAA;AAAA;AAAA;AAHF;AA0CD;;AA3G8B;;AA6GrC,eAAeZ,OAAf","sourcesContent":["import React from 'react';\nimport Swal from 'sweetalert2'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Form } from 'react-bootstrap';\n\nclass Contact extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = { feedback: '',\n                      name: '',\n                      email: '' \n                     };\n      }\n      // saves the user's name entered to state\n      nameChange = (event) => {\n        this.setState({name: event.target.value})\n      }\n      \n      // saves the user's email entered to state\n      emailChange = (event) => {\n        this.setState({email: event.target.value})\n      }\n\n      // saves the user's message entered to state\n      messageChange = (event) => {\n        this.setState({feedback: event.target.value})\n      }\n\n      //onSubmit of email form\n      handleSubmit = (event) => {\n        event.preventDefault();\n\n        //This templateId is created in EmailJS.com\n        const templateId = 'template_r4c6dwx';\n    \n        //This is a custom method from EmailJS that takes the information \n        //from the form and sends the email with the information gathered \n        //and formats the email based on the templateID provided.\n        this.sendFeedback(templateId, {\n                                        message: this.state.feedback, \n                                        name: this.state.name, \n                                        email: this.state.email\n                                       }\n                         )\n\n      }\n    \n      //Custom EmailJS method\n      sendFeedback = (templateId, variables) => {\n        window.emailjs.send(\n          'gmail', templateId,\n          variables\n          ).then(res => {\n            // Email successfully sent alert\n            Swal.fire({\n              title: 'Email Successfully Sent',\n              icon: 'success'\n            })\n          })\n          // Email Failed to send Error alert\n          .catch(err => {\n            Swal.fire({\n              title: 'Email Failed to Send',\n              icon: 'error'\n            })\n            console.error('Email Error:', err)\n          })\n      }\n    \n      render() {\n        return (\n          \n          //Form layout that requires a Name, Email, and message\n          <form className=\"test-mailing\" onSubmit={this.handleSubmit}>\n\n            <br/>\n            <div style={{fontSize: \"1.2rem\"}}>\n\n              <h6>You can also send me an email directly from here</h6>\n              <div>\n                  <label htmlFor=\"name\">Name</label>\n                  <input className=\"form-control email-inputs\" name=\"user_name\" type=\"text\" \n                    id=\"name\" onChange={this.nameChange} required/>\n              </div>\n\n              <div>\n                  <label htmlFor=\"email\">Email</label>\n                  <input className=\"form-control email-inputs\" name=\"user_email\" type=\"text\"\n                    id=\"email\" onChange={this.emailChange} required/>\n              </div>\n\n              <label htmlFor=\"message\">\n                  Message\n              </label>\n              <div>\n                <textarea\n                  id=\"message\"\n                  name=\"message\"\n                  onChange={this.messageChange}\n                  placeholder=\"Put your message here\"\n                  required\n                  className=\"email-text-area form-control\"\n                  rows=\"15\"\n                  cols=\"20\"\n                />\n              </div>\n\n            </div>\n\n            <input type=\"submit\" value=\"Submit\" className=\"btn btn-outline-light\" />\n          </form>\n        )\n      }\n}\nexport default Contact;\n\n\n"]},"metadata":{},"sourceType":"module"}